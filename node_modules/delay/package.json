{
  "_from": "delay",
  "_id": "delay@2.0.0",
  "_inBundle": false,
  "_integrity": "sha1-kRLq3APk7H4AKXM3iW8nO72R+uU=",
  "_location": "/delay",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "delay",
    "fetchSpec": "latest",
    "name": "delay",
    "raw": "delay",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/delay/-/delay-2.0.0.tgz",
  "_shasum": "9112eadc03e4ec7e00297337896f273bbd91fae5",
  "_spec": "delay",
  "_where": "/Users/mitchell/Desktop/M8-Bot",
  "author": {
    "email": "sindresorhus@gmail.com",
    "name": "Sindre Sorhus",
    "url": "sindresorhus.com"
  },
  "bugs": {
    "url": "https://github.com/sindresorhus/delay/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "p-defer": "^1.0.0"
  },
  "deprecated": false,
  "description": "Delay a promise a specified amount of time",
  "devDependencies": {
    "ava": "*",
    "bluebird": "^3.3.5",
    "in-range": "^1.0.0",
    "loud-rejection": "^1.3.0",
    "time-span": "^1.0.0",
    "xo": "^0.16.0"
  },
  "engines": {
    "node": ">=4"
  },
  "files": [
    "index.js"
  ],
  "homepage": "https://github.com/sindresorhus/delay#readme",
  "keywords": [
    "async",
    "await",
    "bluebird",
    "defer",
    "delay",
    "delay",
    "event",
    "loop",
    "next",
    "promise",
    "promises",
    "resolve",
    "settimeout",
    "stall",
    "tick",
    "timeout",
    "wait"
  ],
  "license": "MIT",
  "name": "delay",
  "optionalDependencies": {},
  "readme": "# delay [![Build Status](https://travis-ci.org/sindresorhus/delay.svg?branch=master)](https://travis-ci.org/sindresorhus/delay)\r\n\r\n> Delay a promise a specified amount of time\r\n\r\n\r\n## Install\r\n\r\n```\r\n$ npm install --save delay\r\n```\r\n\r\n\r\n## Usage\r\n\r\n```js\r\nconst delay = require('delay');\r\n\r\ndelay(200)\r\n\t.then(() => {\r\n\t\t// Executed after 200 milliseconds\r\n\t});\r\n\r\nsomePromise()\r\n\t.then(delay(100))\r\n\t.then(result => {\r\n\t\t// Executed 100 milliseconds after somePromise resolves\r\n\t\t// The result from somePromise is passed through\r\n\t});\r\n```\r\n\r\n\r\n## Advanced usage\r\n\r\n```js\r\nconst delay = require('delay');\r\n\r\n// With Node.js >=7.6 and async functions\r\nasync () => {\r\n\tbar();\r\n\r\n\tawait delay(100);\r\n\r\n\t// Executed 100 milliseconds later\r\n\tbaz();\r\n}();\r\n\r\n// There's also `delay.reject()` that takes the value, and rejects it `ms` later\r\nPromise.resolve('foo')\r\n\t.then(delay.reject(100))\r\n\t.then(x => blah()) // Never executed\r\n\t.catch(err => {\r\n\t\t// Executed 100 milliseconds later\r\n\t\t// err === 'foo'\r\n\t});\r\n\r\n// You can also specify the rejection value\r\nPromise.resolve('foo')\r\n\t.then(delay.reject(100, 'bar'))\r\n\t.then(x => blah()) // Never executed\r\n\t.catch(err => {\r\n\t\t// executed 100 milliseconds later\r\n\t\t// err === 'bar'\r\n\t});\r\n\r\n// You can cancel the promise by calling `.cancel()`\r\nasync () => {\r\n\tconst delaying = delay(1000);\r\n\tsetTimeout(() => {\r\n\t\tdelaying.cancel();\r\n\t}, 500);\r\n\ttry {\r\n\t\tawait delaying;\r\n\t} catch (err) {\r\n\t\t// `err` is an instance of `delay.CancelError`\r\n\t}\r\n}();\r\n```\r\n\r\n\r\n## API\r\n\r\n### delay(ms, [value])\r\n\r\nDelay the promise and then resolve.\r\n\r\n### delay.reject(ms, [value])\r\n\r\nDelay the promise and then reject.\r\n\r\n#### ms\r\n\r\nType: `number`\r\n\r\nMilliseconds to delay the promise.\r\n\r\n#### value\r\n\r\nType: `any`\r\n\r\nValue to pass down the promise chain. Overrides any existing value.\r\n\r\n### delay.CancelError\r\n\r\nExposed for instance checking.\r\n\r\n### delay#cancel()\r\n\r\nCancel the delay. Results in the promise being rejected with a `delay.CancelError` error.\r\n\r\n\r\n## Related\r\n\r\n- [p-min-delay](https://github.com/sindresorhus/p-min-delay) - Delay a promise a minimum amount of time\r\n- [p-immediate](https://github.com/sindresorhus/p-immediate) - Returns a promise resolved in the next event loop - think `setImmediate()`\r\n- [p-timeout](https://github.com/sindresorhus/p-timeout) - Timeout a promise after a specified amount of time\r\n- [More…](https://github.com/sindresorhus/promise-fun)\r\n\r\n\r\n## License\r\n\r\nMIT © [Sindre Sorhus](https://sindresorhus.com)\r\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/delay.git"
  },
  "scripts": {
    "test": "xo && ava"
  },
  "version": "2.0.0"
}
