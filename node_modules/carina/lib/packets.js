"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var events_1 = require('events');
(function (PacketState) {
    // The packet has not been sent yet, it may be queued for later sending
    PacketState[PacketState["Pending"] = 1] = "Pending";
    // The packet has been sent over the websocket successfully and we are
    // waiting for a reply.
    PacketState[PacketState["Sending"] = 2] = "Sending";
    // The packet was replied to, and has now been complete.
    PacketState[PacketState["Replied"] = 3] = "Replied";
    // The caller has indicated they no longer wish to be notified about this event.
    PacketState[PacketState["Cancelled"] = 4] = "Cancelled";
})(exports.PacketState || (exports.PacketState = {}));
var PacketState = exports.PacketState;
var maxInt32 = 0xFFFFFFFF;
/**
 * A Packet is a data type that can be sent over the wire to Constellation.
 */
var Packet = (function (_super) {
    __extends(Packet, _super);
    function Packet(method, params) {
        _super.call(this);
        this.method = method;
        this.params = params;
        this.state = PacketState.Pending;
        this.data = {
            id: Math.floor(Math.random() * maxInt32),
            type: 'method',
            method: method,
            params: params,
        };
    }
    /**
     * Returns the randomly-assigned numeric ID of the packet.
     * @return {number}
     */
    Packet.prototype.id = function () {
        return this.data.id;
    };
    /**
     * Aborts sending the message, if it has not been sent yet.
     */
    Packet.prototype.cancel = function () {
        this.emit('cancel');
        this.setState(PacketState.Cancelled);
    };
    /**
     * toJSON implements is called in JSON.stringify.
     */
    Packet.prototype.toJSON = function () {
        return this.data;
    };
    /**
     * Sets the timeout duration on the packet. It defaults to the socket's
     * timeout duration.
     */
    Packet.prototype.setTimeout = function (duration) {
        this.timeout = duration;
    };
    /**
     * Returns the packet's timeout duration, or the default if undefined.
     */
    Packet.prototype.getTimeout = function (defaultTimeout) {
        return this.timeout || defaultTimeout;
    };
    /**
     * Returns the current state of the packet.
     * @return {PacketState}
     */
    Packet.prototype.getState = function () {
        return this.state;
    };
    Packet.prototype.setState = function (state) {
        if (state === this.state) {
            return;
        }
        this.state = state;
    };
    return Packet;
}(events_1.EventEmitter));
exports.Packet = Packet;
/**
 * Call represents a Constellation method call.
 */
var Call = (function (_super) {
    __extends(Call, _super);
    function Call() {
        _super.apply(this, arguments);
    }
    return Call;
}(Packet));
exports.Call = Call;
//# sourceMappingURL=packets.js.map