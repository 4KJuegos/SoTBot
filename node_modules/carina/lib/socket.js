"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var errors_1 = require('./errors');
var reconnection_1 = require('./reconnection');
var events_1 = require('events');
var packets_1 = require('./packets');
var util_1 = require('./util');
var querystring = require('querystring');
var pako = require('pako');
var pkg = require('../package.json');
/**
 * SizeThresholdGzipDetector is a GzipDetector which zips all packets longer
 * than a certain number of bytes.
 */
var SizeThresholdGzipDetector = (function () {
    function SizeThresholdGzipDetector(threshold) {
        this.threshold = threshold;
    }
    SizeThresholdGzipDetector.prototype.shouldZip = function (packet, raw) {
        return packet.length > this.threshold;
    };
    return SizeThresholdGzipDetector;
}());
exports.SizeThresholdGzipDetector = SizeThresholdGzipDetector;
/**
 * State is used to record the status of the websocket connection.
 */
(function (State) {
    // a connection attempt has not been made yet
    State[State["Idle"] = 1] = "Idle";
    // a connection attempt is currently being made
    State[State["Connecting"] = 2] = "Connecting";
    // the socket is connection and data may be sent
    State[State["Connected"] = 3] = "Connected";
    // the socket is gracefully closing; after this it will become Idle
    State[State["Closing"] = 4] = "Closing";
    // the socket is reconnecting after closing unexpectedly
    State[State["Reconnecting"] = 5] = "Reconnecting";
    // connect was called whilst the old socket was still open
    State[State["Refreshing"] = 6] = "Refreshing";
})(exports.State || (exports.State = {}));
var State = exports.State;
function getDefaults() {
    return {
        url: 'wss://constellation.beam.pro',
        userAgent: "Carina " + pkg.version,
        replyTimeout: 10000,
        isBot: false,
        gzip: new SizeThresholdGzipDetector(1024),
        autoReconnect: true,
        reconnectionPolicy: new reconnection_1.ExponentialReconnectionPolicy(),
        pingInterval: 10 * 1000,
    };
}
var ConstellationSocket = (function (_super) {
    __extends(ConstellationSocket, _super);
    function ConstellationSocket(options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        _super.call(this);
        this.queue = new Set();
        this.setMaxListeners(Infinity);
        this.setOptions(options);
        if (ConstellationSocket.WebSocket === undefined) {
            throw new Error('Cannot find a websocket implementation; please provide one by ' +
                'running ConstellationSocket.WebSocket = myWebSocketModule;');
        }
        this.on('message', function (msg) { return _this.extractMessage(msg.data); });
        this.on('open', function () { return _this.schedulePing(); });
        this.on('event:hello', function () {
            _this.options.reconnectionPolicy.reset();
            _this.state = State.Connected;
            _this.queue.forEach(function (data) { return _this.send(data); });
        });
        this.on('close', function (err) {
            if (_this.state === State.Refreshing) {
                _this.state = State.Idle;
                _this.connect();
                return;
            }
            if (_this.state === State.Closing || !_this.options.autoReconnect) {
                _this.state = State.Idle;
                return;
            }
            _this.state = State.Reconnecting;
            _this.reconnectTimeout = setTimeout(function () {
                _this.connect();
            }, _this.options.reconnectionPolicy.next());
        });
    }
    /**
     * Set the given options.
     * Defaults and previous option values will be used if not supplied.
     */
    ConstellationSocket.prototype.setOptions = function (options) {
        this.options = Object.assign({}, this.options || getDefaults(), options);
        if (this.options.jwt && this.options.authToken) {
            throw new Error('Cannot connect to Constellation with both JWT and OAuth token.');
        }
    };
    /**
     * Open a new socket connection. By default, the socket will auto
     * connect when creating a new instance.
     */
    ConstellationSocket.prototype.connect = function () {
        var _this = this;
        if (this.state === State.Closing) {
            this.state = State.Refreshing;
            return;
        }
        var protocol = this.options.gzip ? 'cnstl-gzip' : 'cnstl';
        var extras = {
            headers: {
                'User-Agent': this.options.userAgent,
                'X-Is-Bot': this.options.isBot,
            },
        };
        var url = this.options.url;
        if (this.options.authToken) {
            extras.headers['Authorization'] = "Bearer " + this.options.authToken;
        }
        else if (this.options.jwt) {
            url += '?' + querystring.stringify({ jwt: this.options.jwt });
        }
        this.socket = new ConstellationSocket.WebSocket(url, protocol, extras);
        this.socket.binaryType = 'arraybuffer';
        this.state = State.Connecting;
        this.rebroadcastEvent('open');
        this.rebroadcastEvent('close');
        this.rebroadcastEvent('message');
        this.socket.addEventListener('error', function (err) {
            if (_this.state === State.Closing) {
                // Ignore errors on a closing socket.
                return;
            }
            _this.emit('error', err);
        });
        return this;
    };
    /**
     * Returns the current state of the socket.
     * @return {State}
     */
    ConstellationSocket.prototype.getState = function () {
        return this.state;
    };
    /**
     * Close gracefully shuts down the websocket.
     */
    ConstellationSocket.prototype.close = function () {
        if (this.state === State.Reconnecting) {
            clearTimeout(this.reconnectTimeout);
            this.state = State.Idle;
            return;
        }
        this.state = State.Closing;
        this.socket.close();
        this.queue.forEach(function (packet) { return packet.cancel(); });
        this.queue.clear();
    };
    /**
     * Executes an RPC method on the server. Returns a promise which resolves
     * after it completes, or after a timeout occurs.
     */
    ConstellationSocket.prototype.execute = function (method, params) {
        if (params === void 0) { params = {}; }
        return this.send(new packets_1.Packet(method, params));
    };
    /**
     * Send emits a packet over the websocket, or queues it for later sending
     * if the socket is not open.
     */
    ConstellationSocket.prototype.send = function (packet) {
        var _this = this;
        if (packet.getState() === packets_1.PacketState.Cancelled) {
            return Promise.reject(new errors_1.CancelledError());
        }
        this.queue.add(packet);
        // If the socket has not said hello, queue the request and return
        // the promise eventually emitted when it is sent.
        if (this.state !== State.Connected) {
            return Promise.race([
                util_1.resolveOn(packet, 'send'),
                util_1.resolveOn(packet, 'cancel')
                    .then(function () { throw new errors_1.CancelledError(); }),
            ]);
        }
        var timeout = packet.getTimeout(this.options.replyTimeout);
        var promise = Promise.race([
            // Wait for replies to that packet ID:
            util_1.resolveOn(this, "reply:" + packet.id(), timeout)
                .then(function (result) {
                _this.queue.delete(packet);
                if (result.err) {
                    throw result.err;
                }
                return result.result;
            })
                .catch(function (err) {
                _this.queue.delete(packet);
                throw err;
            }),
            // Never resolve if the consumer cancels the packets:
            util_1.resolveOn(packet, 'cancel', timeout + 1)
                .then(function () { throw new errors_1.CancelledError(); }),
            // Re-queue packets if the socket closes:
            util_1.resolveOn(this, 'close', timeout + 1)
                .then(function () {
                if (!_this.queue.has(packet)) {
                    return;
                }
                packet.setState(packets_1.PacketState.Pending);
                return _this.send(packet);
            }),
        ]);
        packet.emit('send', promise);
        packet.setState(packets_1.PacketState.Sending);
        this.sendPacketInner(packet);
        return promise;
    };
    ConstellationSocket.prototype.sendPacketInner = function (packet) {
        var data = JSON.stringify(packet);
        var payload = this.options.gzip.shouldZip(data, packet.toJSON())
            ? pako.gzip(data)
            : data;
        this.emit('send', payload);
        this.socket.send(payload);
    };
    ConstellationSocket.prototype.extractMessage = function (packet) {
        var messageString;
        // If the packet is binary, then we need to unzip it
        if (typeof packet !== 'string') {
            messageString = pako.ungzip(packet, { to: 'string' });
        }
        else {
            messageString = packet;
        }
        var message;
        try {
            message = JSON.parse(messageString);
        }
        catch (err) {
            throw new errors_1.MessageParseError('Message returned was not valid JSON');
        }
        // Bump the ping timeout whenever we get a message reply.
        this.schedulePing();
        switch (message.type) {
            case 'event':
                this.emit("event:" + message.event, message.data);
                break;
            case 'reply':
                var err = message.error ? errors_1.ConstellationError.from(message.error) : null;
                this.emit("reply:" + message.id, { err: err, result: message.result });
                break;
            default:
                throw new errors_1.MessageParseError("Unknown message type \"" + message.type + "\"");
        }
    };
    ConstellationSocket.prototype.rebroadcastEvent = function (name) {
        var _this = this;
        this.socket.addEventListener(name, function (evt) { return _this.emit(name, evt); });
    };
    ConstellationSocket.prototype.schedulePing = function () {
        var _this = this;
        clearTimeout(this.pingTimeout);
        this.pingTimeout = setTimeout(function () {
            if (_this.state !== State.Connected) {
                return;
            }
            var packet = new packets_1.Packet('ping', null);
            var timeout = _this.options.replyTimeout;
            setTimeout(function () {
                _this.sendPacketInner(packet);
                _this.emit('ping');
            });
            return Promise.race([
                util_1.resolveOn(_this, "reply:" + packet.id(), timeout),
                util_1.resolveOn(_this, 'close', timeout + 1),
            ])
                .then(function () { return _this.emit('pong'); })
                .catch(function (err) { return _this.socket.close(); });
        }, this.options.pingInterval);
    };
    // WebSocket constructor, may be overridden if the environment
    // does not natively support it.
    ConstellationSocket.WebSocket = typeof WebSocket === 'undefined' ? null : WebSocket;
    return ConstellationSocket;
}(events_1.EventEmitter));
exports.ConstellationSocket = ConstellationSocket;
//# sourceMappingURL=socket.js.map