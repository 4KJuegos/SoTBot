/// <reference types="node" />
export declare class BaseError extends Error {
    message: any;
    constructor(message: any);
}
export declare class CancelledError extends BaseError {
    constructor();
}
export declare class TimeoutError extends BaseError {
}
export declare class MessageParseError extends BaseError {
}
export declare module ConstellationError {
    class Base extends BaseError {
        code: number;
        constructor(code: number, message: string);
    }
    function from({code, message}: {
        code: number;
        message: string;
    }): any;
    class InvalidPayload extends Base {
        constructor(message: string);
    }
    class PayloadDecompression extends Base {
        constructor(message: string);
    }
    class UnknownPacketType extends Base {
        constructor(message: string);
    }
    class UnknownMethodName extends Base {
        constructor(message: string);
    }
    class InvalidMethodArguments extends Base {
        constructor(message: string);
    }
    class SessionExpired extends Base {
        constructor(message: string);
    }
    class LiveUnknownEvent extends Base {
        constructor(message: string);
    }
    class LiveAccessDenied extends Base {
        constructor(message: string);
    }
    class LiveAlreadySubscribed extends Base {
        constructor(message: string);
    }
    class LiveNotSubscribed extends Base {
        constructor(message: string);
    }
}
